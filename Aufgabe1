/* Aufgabe 1: 
** wir programmieren in C
** 1) drei int werden angelegt und addiert
** 2) drei int werden als Parameter an eine funktion 
** übergeben und dort multipliziert und retour gegeben und 
** das Ergebnis am Schirm angezeigt
** 3) die drei int werden über die Konsole eingegeben und 
** in der Konsole angezeigt.
** 4) die drei int werden in ein File geschrieben
** 5) in einer weiteren funktion wird das File gelesen,
** die drei int werden am Bildschirm angezeigt
** 6) packe die drei int in eine struct, verwende typedef und wiederhole 1 bis 5
*/

/* Aufgabe 2:
** Realisiere Aufgabe 1 in C++, 
** wobei Punkt 6 eine Klasse wird, notwendigerweise
*/

/* Aufgabe 3:
** 1) lies input_tree.csv in C ein und gib es zeilenweise auf der Konsole aus.
** 2) lies input_tree.csv in C++ ein und gib es zeilenweise auf der Konsole aus.
*/

/* Aufgabe 4:
** lege 10 int als array im stack an 
** lege 1000 int als array im heap an in 
** 1) C
** 2) C++ 
** gib allen int beliebige Werte, drucke diese in ein txt File, lies dieses File später ein
** schreibe die Werte binär in ein bin File und lies sie von dort wieder aus
*/

/* Aufgabe 5:
** 1) do five binary writes of one int to a file
** 2) read the binary file and print the int's to the console
*/

/* Aufgabe 6:
** realize Aufgabe 5 in C++.
*/

/* Aufgabe 7:
** Klasse M mit mNum, vName, nName, gebDatum, gehalt, eintrDatum
** Erstelle mindestens 5 records, füge sie in einen std::vector hinzu und finde den ältesten MA, den Bestverdiener, 
** 
** C++
*/

/* Aufgabe 8:
** Erstelle in MFC eine Dialog Application mit zwei Textfeldern und einem Button.
** Clickt man den Button wird der Text aus Feld 1 gelesen und in Feld 2 geschrieben.
** 
*/

/* Aufgabe 9:
** Erstelle eine MFC Dialog Application um eine Eingabemaske für Aufgabe 7 zu erhalten 
** Zeige die gelesenen Inhalte auch in anderen Feldern der Dialogbox an, 
** Schreibe die Daen in ein Text File
*/

/* Aufgabe 10:
** erstelle in einer funktion f1 ein Array mit 5 Klassen und gib sie an die main function retour 
** 1.) und dort in der Konsole oder 
** 2) einem MFC Dialog aus.
*/

/* Augabe 11:
** Zeichne zweidimensional in einer MFC Dialog Application ein Lininenchart
*/

/* Aufgabe 12:
** Downloaden und Installieren sie boost in VS2019
** von boost.org und befolgen sie die Anweisungen zur Installation
*/

/* Aufgabe 13:
** Programmiere ein XOR
** in MFC mit zwei Eingabe und einem Ausgabefeld oder in der Konsole
*/

/* Aufgabe 14:
** Schreiben sie die definition einer funktion,
** deren deklaration lautet:
** void tanhSigmoid(double * p_val);
** und wenden sie diese zumindest einmal aus der main funktion an.
** Es soll dabei der übergebene Wert in den tanh umgewandelt werden.
** Machen sie sich gedanken über den Verlauf dieser Funktion, auf einem Blatt Papier
** oder in Excel oder als Graphik programmiert. 
** Ist die Bezeichnung Sigmoid gerechtfertigt?
*/

/* Aufgabe 15:
** Schreiben sie die definition einer funktion,
** deren deklaration lautet:
** double derivative_tanhSigmoid(double * p_val);
** und wenden sie diese zumindest einmal aus der main funktion an.
** Es soll dabei 1.0 - dem Quadrat des übergebenen Wertes retour gegeben werden.
*/

 /*
 ** Aufgabe  16:
 ** kreieren sie in der Klasse N die funktion
 ** // Normalization function
 ** void N::norm(double& p_v_orig) { 
 **                                  p_v_orig = (p_v_orig - A_min) * (new_A_max - new_A_min) / (A_max - A_min) + new_A_min;
 ** }
 ** und
 ** // Denormalization function
 ** double N::denorm(double& p_v_norm) {
 **                                    	return (p_v_norm - new_A_min) * (A_max - A_min) / (new_A_max - new_A_min) + A_min;
 ** }
 ** Erstellen Sie in main ein tuple
 ** normalization{ 1.0, 0.0, 1.0, 0.0 };
 ** und übergeben es mit dem Konstruktor an die Klasse N.
 ** Testen sie dann aus main, was die fuktionen norm und denorm der Klasse N tun, mit verschiedenen double Werten.
 */

/* Aufgabe 17:
** Übergib eine beliebige, variable Anzahl int als Parameter an den Konstruktor einer Klasse N
** und drucke diese vomm Konstruktor in der Konsole aus.
** Verwende dazu eine std::initializer_list
*/

